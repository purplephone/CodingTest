package main

import (
	"bufio"
	"os"
	"strconv"
)

var (
	sc      *bufio.Scanner
	wr      *bufio.Writer
	visited []bool
	result  []int
	treeMap map[int]*Node
)

type Node struct {
	data []int
}

func init() {
	sc = bufio.NewScanner(os.Stdin)
	sc.Split(bufio.ScanWords)
	wr = bufio.NewWriter(os.Stdout)
}

func main() {
	defer wr.Flush()
	N := scanInt()
	visited = make([]bool, N+1)
	result = make([]int, N+1)
	treeMap = make(map[int]*Node)
	for i := 1; i <= N; i++ {
		treeMap[i] = &Node{}
	}
	for i := 1; i < N; i++ {
		s1 := scanInt()
		s2 := scanInt()

		treeMap[s1].data = append(treeMap[s1].data, s2)
		treeMap[s2].data = append(treeMap[s2].data, s1)
	}
	dfs(1)
	for i := 2; i <= N; i++ {
		wr.WriteString(strconv.Itoa(result[i]) + "\n")
	}
}

func dfs(index int) {
	visited[index] = true
	for _, i := range treeMap[index].data {
		if !visited[i] {
			result[i] = index
			dfs(i)
		}
	}
}

func scanInt() (n int) {
	sc.Scan()
	n = 0
	for _, i := range sc.Bytes() {
		n *= 10
		n += int(i - '0')
	}
	return
}
