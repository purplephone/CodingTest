package main

import (
	"bufio"
	"os"
	"strconv"
)

type Queue struct {
	items []int
}

func (q *Queue) Push(value int) {
	q.items = append(q.items, value)
}

func (q *Queue) Pop() int {
	if len(q.items) == 0 {
		return -1
	}
	item, items := q.items[0], q.items[1:]
	q.items = items
	return item
}

func (q *Queue) Empty() bool {
	if len(q.items) == 0 {
		return true
	} else {
		return false
	}
}

var sc *bufio.Scanner
var wr *bufio.Writer
var N, M, V int
var visited [1001]bool
var graph [1001][1001]bool

func init() {
	sc = bufio.NewScanner(os.Stdin)
	sc.Split(bufio.ScanWords)
	wr = bufio.NewWriter(os.Stdout)
}

func main() {
	defer wr.Flush()
	N = scanInt()
	M = scanInt()
	V = scanInt()

	for i := 0; i < M; i++ {
		a := scanInt()
		b := scanInt()
		graph[a][b] = true
		graph[b][a] = true
	}
	dfs(V)
	wr.WriteByte('\n')
	bfs(V)
}

func dfs(v int) {
	wr.WriteString(strconv.Itoa(v) + " ")
	visited[v] = true
	for i := 1; i < N+1; i++ {
		if visited[i] != true && graph[v][i] {
			dfs(i)
		}
	}
}

func bfs(v int) {
	Q := Queue{}
	Q.Push(v)
	visited[v] = false
	for Q.Empty() != true {
		tmp := Q.Pop()
		wr.WriteString(strconv.Itoa(tmp) + " ")
		for i := 1; i < N+1; i++ {
			if visited[i] && graph[tmp][i] {
				visited[i] = false
				Q.Push(i)
			}
		}
	}
}

func scanInt() (n int) {
	sc.Scan()
	n, _ = strconv.Atoi(sc.Text())
	return
}
