package main

import (
	"bufio"
	"os"
	"strconv"
	"strings"
)

var (
	sc         *bufio.Scanner
	wr         *bufio.Writer
	N, M, max  int
	arr        [20][20]byte
	visitedAlp [26]bool
	dx, dy     [4]int
	changeByte byte
)

func init() {
	sc = bufio.NewScanner(os.Stdin)
	wr = bufio.NewWriter(os.Stdout)
	dx = [4]int{0, 0, 1, -1}
	dy = [4]int{1, -1, 0, 0}
	changeByte = 65
}

func main() {
	defer wr.Flush()
	tmp := scanInts()
	N = tmp[0]
	M = tmp[1]

	for i := 0; i < N; i++ {
		sc.Scan()
		str := sc.Bytes()
		for j := 0; j < M; j++ {
			arr[i][j] = str[j]
		}
	}

	visitedAlp[(arr[0][0] - changeByte)] = true
	dfs(0, 0, 1)

	wr.WriteString(strconv.Itoa(max))
}

func dfs(x, y, cnt int) {
	max = Max(max, cnt)
	for i := 0; i < 4; i++ {
		newX := x + dx[i]
		newY := y + dy[i]
		if check(newX, newY) && !visitedAlp[(arr[newX][newY]-changeByte)] {
			visitedAlp[(arr[newX][newY] - changeByte)] = true
			dfs(newX, newY, cnt+1)
			visitedAlp[(arr[newX][newY] - changeByte)] = false
		}
	}
}

func check(i, j int) bool {
	if i >= 0 && i < N && j >= 0 && j < M {
		return true
	} else {
		return false
	}
}

func Max(i, j int) int {
	if i > j {
		return i
	} else {
		return j
	}
}

func scanInts() (n [2]int) {
	sc.Scan()
	str := strings.Fields(sc.Text())
	for i, m := range str {
		n[i], _ = strconv.Atoi(m)
	}
	return
}
